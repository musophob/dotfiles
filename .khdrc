# sample config for khd

# NOTE(koekeishiya): A bind is written in the form:
#                   <keysym> [!] [<app list>] [->] : <command>
#                   where
#                       <keysym>   = mode + mod + ... + mod - literal
#
#                       <keysym>   = mode + mod + ... + mod - keycode
#                                    keycode must have 0x prefix
#
#                       <keysym>   = mode + mod + ... + mod - button#
#                                    replace '#' with mouse-button id; id >= 3
#
#                       modifier only binding
#                       <keysym>   = mode + mod + ... + mod
#
#                       literal only binding
#                       <keysym>   = - literal
#
#                       keycode only binding
#                       <keysym>   = - keycode
#
#                       [<app,
#                         app,     = optional list '[app1, ..., appN]' of applications
#                         app>]      that this bind will be activated for. if the
#                                    focused application is not contained in this list,
#                                    the associated command will not be triggered, and
#                                    the keypress will be passed through as normal.
#
#                       [!]        = optional operator '!' negates the behaviour when a
#                                    list of applications is given. this marks the bind
#                                    as 'Hotkey_Exclude', causing the bind to not work
#                                    when the focused application is in the given list.
#
#                       [->]       = optional operator '->' that marks this bind as
#                                    'passthrough'. this causes the key to be passed
#                                    through to the system, instead of being consumed.
#
#                       <command>  = command is executed through '$SHELL -c' and
#                                    follows valid shell syntax. if the $SHELL environment
#                                    variable is not set, it will default to '/bin/bash'.
#                                    when bash is used, the ';' delimeter can be specified
#                                    to chain commands.
#
#                                    to allow a command to extend into multiple lines,
#                                    prepend '\' at the end of the previous line.
#
#                                    an EOL character signifies the end of the bind.

# NOTE(koekeishiya) Example of passthrough
# cmd - m -> : echo "alert and minimize window" | alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ]
#         : echo "so this is how deep the rabbit hole goes.." |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Example of negated app list
# alt - e [
#           iTerm2,
#           Terminal,
#           HyperTerm
#         ] !
#         : echo "blue pill, i choose you!" |\
#           alerter -title Test passthrough -timeout 2

# NOTE(koekeishiya) Modifier only binding
# left shift    -> (    right shift   -> )
# left cmd      -> {    right cmd     -> }

# khd mod_trigger_timeout 0.1


# suppress unregistered keybinds outside default mode
# enabled by default! must be explicitly set to 'off'
# khd void_unlisted_bind off



# # set border color for different modes
# khd mode default on_enter kwmc config border focused color 0xddd5c4a1
# khd mode switcher on_enter kwmc config border focused color 0xddbdd322
# khd mode ytd on_enter kwmc config border focused color 0xddd75f5f
# khd mode swap on_enter kwmc config border focused color 0xdd458588
# khd mode tree on_enter kwmc config border focused color 0xddfabd2f
# khd mode space on_enter kwmc config border focused color 0xddb16286
# khd mode info on_enter kwmc config border focused color 0xddcd950c



##
# vi-mode for non-terminal applications
##

# lctrl - h         ![HyperTerm,Terminal,iTerm2]      :   khd -p "- left"



##
# chunkwm
##

# open a terminal
ctrl - return : open -na /Applications/iTerm.app

# use switcher mode as a tmux-like prefix
ctrl - space : khd -e "mode activate switcher"
# it's persistent until escaped
switcher - escape : khd -e "mode activate default"

# window commands
# https://github.com/koekeishiya/chunkwm/blob/master/src/plugins/tiling/README.md#window-commands

# focus window
switcher - h : chunkc tiling::window --focus west
switcher - j : chunkc tiling::window --focus south
switcher - k : chunkc tiling::window --focus north
switcher - l : chunkc tiling::window --focus east

switcher - o : chunkc tiling::window --focus prev
switcher - p : chunkc tiling::window --focus next

# toggle window fullscreen
switcher - return : chunkc tiling::window --toggle fullscreen

# toggle window native fullscreen
switcher + ctrl - return : chunkc tiling::window --toggle native-fullscreen

# toggle window split type with \
switcher - 0x2A : chunkc tiling::window --toggle split

# equalize size of windows with '
switcher - 0x27 : chunkc tiling::desktop --equalize

# float / unfloat window with `
switcher - 0x32 : chunkc tiling::window --toggle float

# toggle sticky, float and resize to picture-in-picture size
# alt - s : chunkc tiling::window --toggle sticky;\
          # chunkc tiling::window --warp-floating pip-right

# swap window
switcher + ctrl - h : chunkc tiling::window --swap west
switcher + ctrl - j : chunkc tiling::window --swap south
switcher + ctrl - k : chunkc tiling::window --swap north
switcher + ctrl - l : chunkc tiling::window --swap east

# move window
switcher + ctrl + shift - h : chunkc tiling::window --warp west
switcher + ctrl + shift - j : chunkc tiling::window --warp south
switcher + ctrl + shift - k : chunkc tiling::window --warp north
switcher + ctrl + shift - l : chunkc tiling::window --warp east

# move floating windows / windows on a floating space
switcher - up : chunkc tiling::window --warp-floating fullscreen
switcher - left : chunkc tiling::window --warp-floating left
switcher - right : chunkc tiling::window --warp-floating right
switcher + shift - left : chunkc tiling::window --warp-floating top-left
switcher + shift - up : chunkc tiling::window --warp-floating top-right
switcher + shift - down : chunkc tiling::window --warp-floating bottom-left
switcher + shift - right : chunkc tiling::window --warp-floating bottom-right

# send window to desktop
# shift + alt - x : chunkc tiling::window --send-to-desktop $(chunkc get _last_active_desktop)
switcher + cmd + shift - tab : chunkc tiling::window --send-to-desktop prev
switcher + cmd - tab : chunkc tiling::window --send-to-desktop next
switcher + cmd - 1 : chunkc tiling::window --send-to-desktop 1
switcher + cmd - 2 : chunkc tiling::window --send-to-desktop 2
switcher + cmd - 3 : chunkc tiling::window --send-to-desktop 3
switcher + cmd - 4 : chunkc tiling::window --send-to-desktop 4
switcher + cmd - 5 : chunkc tiling::window --send-to-desktop 5

# focus monitor
switcher - tab  : chunkc tiling::monitor -f next
switcher + shift - tab  : chunkc tiling::monitor -f prev
switcher - 1  : chunkc tiling::monitor -f 1
switcher - 2  : chunkc tiling::monitor -f 2
switcher - 3  : chunkc tiling::monitor -f 3

# # send window to monitor and follow focus
# ctrl + cmd - z  : chunkc tiling::window --send-to-monitor prev; chunkc tiling::monitor -f prev
# ctrl + cmd - c  : chunkc tiling::window --send-to-monitor next; chunkc tiling::monitor -f next
# ctrl + cmd - 1  : chunkc tiling::window --send-to-monitor 1; chunkc tiling::monitor -f 1
# ctrl + cmd - 2  : chunkc tiling::window --send-to-monitor 2; chunkc tiling::monitor -f 2
# ctrl + cmd - 3  : chunkc tiling::window --send-to-monitor 3; chunkc tiling::monitor -f 3

# # increase region size
# shift + alt - a : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge west
# shift + alt - s : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge south
# shift + alt - w : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge north
# shift + alt - d : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge east

# # decrease region size
# shift + cmd - a : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge west
# shift + cmd - s : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge south
# shift + cmd - w : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge north
# shift + cmd - d : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge east

# # set insertion point for focused container
# ctrl + alt - f : chunkc tiling::window --use-insertion-point cancel
# ctrl + alt - h : chunkc tiling::window --use-insertion-point west
# ctrl + alt - j : chunkc tiling::window --use-insertion-point south
# ctrl + alt - k : chunkc tiling::window --use-insertion-point north
# ctrl + alt - l : chunkc tiling::window --use-insertion-point east

# rotate tree
switcher - 0x1E : chunkc tiling::desktop --rotate 90
switcher - 0x21 : chunkc tiling::desktop --rotate -90

# # mirror tree y-axis
# alt - y : chunkc tiling::desktop --mirror vertical

# # mirror tree x-axis
# alt - x : chunkc tiling::desktop --mirror horizontal

# # toggle desktop offset
# alt - a : chunkc tiling::desktop --toggle offset

# # float next window to be tiled
# shift + alt - t : chunkc set window_float_next 1

# # change layout of desktop
# ctrl + alt - a : chunkc tiling::desktop --layout bsp
# ctrl + alt - s : chunkc tiling::desktop --layout monocle
# ctrl + alt - d : chunkc tiling::desktop --layout float
